// <auto-generated />
using System;
using BankAppointmentScheduler.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace BankAppointmentScheduler.Persistence.Migrations
{
    [DbContext(typeof(postgresContext))]
    partial class postgresContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasPostgresExtension("adminpack")
                .HasAnnotation("Relational:Collation", "Russian_Russia.1251")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.HasSequence("bank_seq");

            modelBuilder.HasSequence("branch_seq");

            modelBuilder.HasSequence("counter_seq");

            modelBuilder.HasSequence("service_seq");

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Appointment", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("branch_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("date")
                        .HasColumnName("arrival_date");

                    b.Property<TimeSpan?>("ArrivalTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("arrival_time");

                    b.Property<string>("Status")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateTimestamp")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("update_tmstmp");

                    b.HasKey("UserId", "BranchId", "ServiceId")
                        .HasName("t_appointments_pkey");

                    b.HasIndex("BranchId");

                    b.HasIndex("ServiceId");

                    b.ToTable("t_appointments", "public");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Bank", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("bank_id")
                        .HasDefaultValueSql("nextval('bank_seq'::regclass)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("bank_name");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(526)
                        .HasColumnType("character varying(526)")
                        .HasColumnName("url");

                    b.HasKey("Id")
                        .HasName("t_banks_pkey");

                    b.ToTable("t_banks", "public");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("branch_id")
                        .HasDefaultValueSql("nextval('branch_seq'::regclass)");

                    b.Property<int>("BankId")
                        .HasColumnType("integer")
                        .HasColumnName("bank_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("address");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("phone");

                    b.HasKey("BranchId", "BankId")
                        .HasName("t_branches_pkey");

                    b.HasIndex("BankId");

                    b.HasIndex("BranchId")
                        .IsUnique()
                        .HasDatabaseName("t_branches_branch_id_key");

                    b.ToTable("t_branches", "public");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Counter", b =>
                {
                    b.Property<int>("CounterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("counter_id")
                        .HasDefaultValueSql("nextval('counter_seq'::regclass)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("branch_id");

                    b.Property<int>("CounterNumber")
                        .HasColumnType("integer")
                        .HasColumnName("counter_number");

                    b.Property<Guid?>("OperatorId")
                        .HasColumnType("uuid")
                        .HasColumnName("operator_id");

                    b.HasKey("CounterId")
                        .HasName("t_counters_pkey");

                    b.HasIndex("BranchId");

                    b.HasIndex("OperatorId");

                    b.ToTable("t_counters", "public");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.CounterService", b =>
                {
                    b.Property<int>("CounterId")
                        .HasColumnType("integer")
                        .HasColumnName("counter_id");

                    b.Property<int>("ServiceId")
                        .HasColumnType("integer")
                        .HasColumnName("service_id");

                    b.HasKey("CounterId", "ServiceId")
                        .HasName("t_counter_services_pkey");

                    b.HasIndex("ServiceId");

                    b.ToTable("t_counter_services", "public");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Schedule", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("branch_id");

                    b.Property<string>("WeekDay")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)")
                        .HasColumnName("week_day");

                    b.Property<TimeSpan>("ClosingTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("closing_time");

                    b.Property<TimeSpan>("OpeningTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("opening_time");

                    b.HasKey("BranchId", "WeekDay")
                        .HasName("t_schedules_pkey");

                    b.ToTable("t_schedules", "public");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Service", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("service_id")
                        .HasDefaultValueSql("nextval('service_seq'::regclass)");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("service_name");

                    b.HasKey("ServiceId")
                        .HasName("t_services_pkey");

                    b.ToTable("t_services", "public");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("last_name");

                    b.HasKey("UserId")
                        .HasName("t_users_pkey");

                    b.ToTable("t_users", "public");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Persistence.Views.appointment", b =>
                {
                    b.Property<DateTime?>("arrival_date")
                        .HasColumnType("date");

                    b.Property<TimeSpan?>("arrival_time")
                        .HasColumnType("time without time zone");

                    b.Property<int?>("branch_id")
                        .HasColumnType("integer");

                    b.Property<int?>("service_id")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<DateTime?>("update_tmstmp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("user_id")
                        .HasColumnType("uuid");

                    b.ToTable("appointments");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Persistence.Views.bank", b =>
                {
                    b.Property<int?>("bank_id")
                        .HasColumnType("integer");

                    b.Property<string>("bank_name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("total_branches")
                        .HasColumnType("bigint");

                    b.Property<string>("url")
                        .HasMaxLength(526)
                        .HasColumnType("character varying(526)");

                    b.ToTable("banks");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Persistence.Views.branch", b =>
                {
                    b.Property<string>("address")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int?>("bank_id")
                        .HasColumnType("integer");

                    b.Property<string>("bank_name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("branch_id")
                        .HasColumnType("integer");

                    b.Property<string>("phone")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("total_counters")
                        .HasColumnType("bigint");

                    b.ToTable("branches");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Persistence.Views.counter", b =>
                {
                    b.Property<string>("bank_name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("branch_id")
                        .HasColumnType("integer");

                    b.Property<int?>("counter_id")
                        .HasColumnType("integer");

                    b.Property<int?>("counter_number")
                        .HasColumnType("integer");

                    b.Property<Guid?>("operator_id")
                        .HasColumnType("uuid");

                    b.ToTable("counters");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Persistence.Views.counter_service", b =>
                {
                    b.Property<string>("bank_name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int?>("branch_id")
                        .HasColumnType("integer");

                    b.Property<int?>("counter_id")
                        .HasColumnType("integer");

                    b.Property<int?>("counter_number")
                        .HasColumnType("integer");

                    b.Property<int?>("service_id")
                        .HasColumnType("integer");

                    b.Property<string>("service_name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.ToTable("counter_services");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Persistence.Views.schedule", b =>
                {
                    b.Property<int?>("branch_id")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("closing_time")
                        .HasColumnType("time without time zone");

                    b.Property<TimeSpan?>("opening_time")
                        .HasColumnType("time without time zone");

                    b.Property<string>("week_day")
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.ToTable("schedules");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Persistence.Views.service", b =>
                {
                    b.Property<int?>("service_id")
                        .HasColumnType("integer");

                    b.Property<string>("service_name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("total_specialized_branches")
                        .HasColumnType("bigint");

                    b.ToTable("services");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Persistence.Views.user", b =>
                {
                    b.Property<string>("email")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("first_name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool?>("is_operator")
                        .HasColumnType("boolean");

                    b.Property<string>("last_name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long?>("total_appointments")
                        .HasColumnType("bigint");

                    b.Property<Guid?>("user_id")
                        .HasColumnType("uuid");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Appointment", b =>
                {
                    b.HasOne("BankAppointmentScheduler.Domain.BankEntities.Entities.Branch", "Branch")
                        .WithMany("Appointments")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("t_appointments_branch_id_fkey")
                        .HasPrincipalKey("BranchId")
                        .IsRequired();

                    b.HasOne("BankAppointmentScheduler.Domain.BankEntities.Entities.Service", "Service")
                        .WithMany("Appointments")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("t_appointments_service_id_fkey")
                        .IsRequired();

                    b.HasOne("BankAppointmentScheduler.Domain.BankEntities.Entities.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .HasConstraintName("t_appointments_user_id_fkey")
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Service");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Branch", b =>
                {
                    b.HasOne("BankAppointmentScheduler.Domain.BankEntities.Entities.Bank", "Bank")
                        .WithMany("Branches")
                        .HasForeignKey("BankId")
                        .HasConstraintName("t_branches_bank_id_fkey")
                        .IsRequired();

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Counter", b =>
                {
                    b.HasOne("BankAppointmentScheduler.Domain.BankEntities.Entities.Branch", "Branch")
                        .WithMany("Counters")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("t_counters_branch_id_fkey")
                        .HasPrincipalKey("BranchId");

                    b.HasOne("BankAppointmentScheduler.Domain.BankEntities.Entities.User", "Operator")
                        .WithMany("Counters")
                        .HasForeignKey("OperatorId")
                        .HasConstraintName("t_counters_operator_id_fkey");

                    b.Navigation("Branch");

                    b.Navigation("Operator");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.CounterService", b =>
                {
                    b.HasOne("BankAppointmentScheduler.Domain.BankEntities.Entities.Counter", "Counter")
                        .WithMany("CounterServices")
                        .HasForeignKey("CounterId")
                        .HasConstraintName("t_counter_services_counter_id_fkey")
                        .IsRequired();

                    b.HasOne("BankAppointmentScheduler.Domain.BankEntities.Entities.Service", "Service")
                        .WithMany("CounterServices")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("t_counter_services_service_id_fkey")
                        .IsRequired();

                    b.Navigation("Counter");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Schedule", b =>
                {
                    b.HasOne("BankAppointmentScheduler.Domain.BankEntities.Entities.Branch", "Branch")
                        .WithMany("Schedules")
                        .HasForeignKey("BranchId")
                        .HasConstraintName("t_schedules_branch_id_fkey")
                        .HasPrincipalKey("BranchId")
                        .IsRequired();

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Bank", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Branch", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Counters");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Counter", b =>
                {
                    b.Navigation("CounterServices");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.Service", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("CounterServices");
                });

            modelBuilder.Entity("BankAppointmentScheduler.Domain.BankEntities.Entities.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Counters");
                });
#pragma warning restore 612, 618
        }
    }
}
